{
  "address": "0x4D81A0587f927075d378507B0bFDD41e04D006c3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAMB",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "ArbitrationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "ArbitrationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "ArbitrationFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_answer",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "ArbitrationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "Evidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "MetaEvidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUMBER_OF_CHOICES_FOR_ARBITRATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "acknowledgeArbitration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amb",
      "outputs": [
        {
          "internalType": "contract IAMB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "arbitrations",
      "outputs": [
        {
          "internalType": "enum RealitioForeignArbitrationProxy.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitratorExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelArbitration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeIDToQuestionID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "handleFailedDisputeCreation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_termsOfService",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_contestedAnswer",
          "type": "bytes32"
        }
      ],
      "name": "requestArbitration",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_homeProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_homeChainId",
          "type": "uint256"
        }
      ],
      "name": "setHomeProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termsOfService",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbb1504415fbaed8f1786bfa4447bdd8c0caad284ce8866ac8184e56c3185377",
  "receipt": {
    "to": null,
    "from": "0xceB4c079Dd21494E0bc99DA732EAdf220b727389",
    "contractAddress": "0x4D81A0587f927075d378507B0bFDD41e04D006c3",
    "transactionIndex": 1,
    "gasUsed": "1843750",
    "logsBloom": "0x
    "blockHash": "0x6f0a0469858ef716e3f09766fda7ca243a5965e79c00d874ed6e59107635e460",
    "transactionHash": "0xdbb1504415fbaed8f1786bfa4447bdd8c0caad284ce8866ac8184e56c3185377",
    "logs": [],
    "blockNumber": 22602607,
    "cumulativeGasUsed": "2269979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFe446bEF1DbF7AFE24E81e05BC8B271C1BA9a560",
    "0x3b261920Ba47f0C0c6162e592181bbE2244b63AE",
    "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
  ],
  "solcInputHash": "da9c10c776d5279b6129c74cb48ce46a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"ArbitrationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"ArbitrationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"ArbitrationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_answer\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"ArbitrationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"Evidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_OF_CHOICES_FOR_ARBITRATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"acknowledgeArbitration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"arbitrations\",\"outputs\":[{\"internalType\":\"enum RealitioForeignArbitrationProxy.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"cancelArbitration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeIDToQuestionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"handleFailedDisputeCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_termsOfService\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_contestedAnswer\",\"type\":\"bytes32\"}],\"name\":\"requestArbitration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_homeProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_homeChainId\",\"type\":\"uint256\"}],\"name\":\"setHomeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termsOfService\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ArbitrationCanceled(bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question to be arbitrated.\"}},\"ArbitrationCreated(bytes32,uint256)\":{\"params\":{\"_disputeID\":\"The ID of the dispute.\",\"_questionID\":\"The ID of the question to be arbitrated.\"}},\"ArbitrationFailed(bytes32)\":{\"details\":\"This will happen if there is an increase in the arbitration fees between the time the arbitration is made and the time it is acknowledged.\",\"params\":{\"_questionID\":\"The ID of the question to be arbitrated.\"}},\"ArbitrationRequested(bytes32,bytes32,address)\":{\"params\":{\"_answer\":\"The answer provided by the requester.\",\"_questionID\":\"The ID of the question to be arbitrated.\",\"_requester\":\"The requester.\"}}},\"kind\":\"dev\",\"methods\":{\"acknowledgeArbitration(bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question.\"}},\"cancelArbitration(bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question.\"}},\"constructor\":{\"details\":\"Contract will still require initialization before being usable.\",\"params\":{\"_amb\":\"ArbitraryMessageBridge contract address.\",\"_arbitrator\":\"Arbitrator contract address.\",\"_arbitratorExtraData\":\"The extra data used to raise a dispute in the arbitrator.\"}},\"getDisputeFee(bytes32)\":{\"returns\":{\"_0\":\"The fee to create a dispute.\"}},\"handleFailedDisputeCreation(bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question.\"}},\"initialize(string,string)\":{\"details\":\"This function can only be called once, after `homeProxy` has already been set for the first time. Since there is a circular dependency between `RealitioForeignArbitrationProxy` and `RealitioHomeArbitrationProxy`, it is not possible to require the home proxy to be a constructor param.\",\"params\":{\"_metaEvidence\":\"The URI of the meta evidence file.\",\"_termsOfService\":\"The path for the Terms of Service for Kleros as an arbitrator for Realitio.\"}},\"requestArbitration(bytes32,bytes32)\":{\"details\":\"Can be executed only if the contract has been initialized.\",\"params\":{\"_contestedAnswer\":\"The answer the requester deems to be incorrect.\",\"_questionID\":\"The ID of the question.\"}},\"rule(uint256,uint256)\":{\"details\":\"Note that 0 is reserved for \\\"Unable/refused to arbitrate\\\" and we map it to `bytes32(-1)` which has a similar connotation in Realitio.\",\"params\":{\"_disputeID\":\"The ID of the dispute in the ERC792 arbitrator.\",\"_ruling\":\"The ruling given by the arbitrator.\"}},\"setGovernor(address)\":{\"params\":{\"_governor\":\"The address of the new governor.\"}},\"setHomeProxy(address,uint256)\":{\"params\":{\"_homeChainId\":\"The chain ID where the home proxy is deployed.\",\"_homeProxy\":\"The address of the proxy.\"}}},\"stateVariables\":{\"NUMBER_OF_CHOICES_FOR_ARBITRATOR\":{\"details\":\"The number of choices for the arbitrator.\"},\"amb\":{\"details\":\"ArbitraryMessageBridge contract address. TRUSTED.\"},\"arbitrations\":{\"details\":\"Tracks arbitration requests for question ID.\"},\"arbitrator\":{\"details\":\"The address of the arbitrator. TRUSTED.\"},\"arbitratorExtraData\":{\"details\":\"The extra data used to raise a dispute in the arbitrator.\"},\"disputeIDToQuestionID\":{\"details\":\"Associates dispute IDs to question IDs.\"},\"governor\":{\"details\":\"The contract governor. TRUSTED.\"},\"homeChainId\":{\"details\":\"The chain ID where the home proxy is deployed.\"},\"homeProxy\":{\"details\":\"Address of the counter-party proxy on the Home Chain. TRUSTED.\"},\"initialized\":{\"details\":\"Whether the contract has been properly initialized or not.\"},\"termsOfService\":{\"details\":\"The path for the Terms of Service for Kleros as an arbitrator for Realitio.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ArbitrationCanceled(bytes32)\":{\"notice\":\"Should be emitted when the arbitration is canceled by the Home Chain.\"},\"ArbitrationCreated(bytes32,uint256)\":{\"notice\":\"Should be emitted when the dispute is created.\"},\"ArbitrationFailed(bytes32)\":{\"notice\":\"Should be emitted when the dispute could not be created.\"},\"ArbitrationRequested(bytes32,bytes32,address)\":{\"notice\":\"Should be emitted when the arbitration is requested.\"}},\"kind\":\"user\",\"methods\":{\"acknowledgeArbitration(bytes32)\":{\"notice\":\"Requests arbitration for given question ID.\"},\"cancelArbitration(bytes32)\":{\"notice\":\"Cancels the arbitration.\"},\"constructor\":{\"notice\":\"Creates an arbitration proxy on the foreign chain.\"},\"getDisputeFee(bytes32)\":{\"notice\":\"Gets the fee to create a dispute.\"},\"handleFailedDisputeCreation(bytes32)\":{\"notice\":\"Cancels the arbitration in case the dispute could not be created.\"},\"initialize(string,string)\":{\"notice\":\"Initializes the contract so it can start receiving arbitration requests.\"},\"requestArbitration(bytes32,bytes32)\":{\"notice\":\"Requests arbitration for given question ID.\"},\"rule(uint256,uint256)\":{\"notice\":\"Rules a specified dispute.\"},\"setGovernor(address)\":{\"notice\":\"Sets the address of a new governor.\"},\"setHomeProxy(address,uint256)\":{\"notice\":\"Sets the address of the arbitration proxy on the Home Chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RealitioForeignArbitrationProxy.sol\":\"RealitioForeignArbitrationProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/erc-792/contracts/IArbitrable.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity >=0.7;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n * @title IArbitrable\\n * Arbitrable interface.\\n * When developing arbitrable contracts, we need to:\\n * - Define the action taken when a ruling is received by the contract.\\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrator The arbitrator giving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x1803a3433a78c509b20bd9477a2c60a71b2ce1ee7e17eb0ef0601618a8a72526\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/IArbitrator.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity >=0.7;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator abstract contract.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost and appealCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    enum DisputeStatus {Waiting, Appealable, Solved}\\n\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when a dispute can be appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealPossible(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when the current ruling is appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealDecision(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must be paid at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give extra info on the appeal.\\n     */\\n    function appeal(uint256 _disputeID, bytes calldata _extraData) external payable;\\n\\n    /**\\n     * @dev Compute the cost of appeal. It is recommended not to increase it often, as it can be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function appealCost(uint256 _disputeID, bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Compute the start and end of the dispute's current or next appeal period, if possible. If not known or appeal is impossible: should return (0, 0).\\n     * @param _disputeID ID of the dispute.\\n     * @return start The start of the period.\\n     * @return end The end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end);\\n\\n    /**\\n     * @dev Return the status of a dispute.\\n     * @param _disputeID ID of the dispute to rule.\\n     * @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint256 _disputeID) external view returns (DisputeStatus status);\\n\\n    /**\\n     * @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\\n     * @param _disputeID ID of the dispute.\\n     * @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n     */\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling);\\n}\\n\",\"keccak256\":\"0x240a4142f9ec379da0333dfc82409b7b058cff9ea118368eb5e8f15447996c1e\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity >=0.7;\\n\\nimport \\\"../IArbitrator.sol\\\";\\n\\n/** @title IEvidence\\n *  ERC-1497: Evidence Standard\\n */\\ninterface IEvidence {\\n    /**\\n     * @dev To be emitted when meta-evidence is submitted.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidence A link to the meta-evidence JSON.\\n     */\\n    event MetaEvidence(uint256 indexed _metaEvidenceID, string _evidence);\\n\\n    /**\\n     * @dev To be raised when evidence is submitted. Should point to the resource (evidences are not to be stored on chain due to gas considerations).\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\\n     * @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence not submitted by any party.\\n     * @param _evidence A URI to the evidence JSON file whose name should be its keccak256 hash followed by .json.\\n     */\\n    event Evidence(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _evidenceGroupID,\\n        address indexed _party,\\n        string _evidence\\n    );\\n\\n    /**\\n     * @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     */\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _disputeID,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID\\n    );\\n}\\n\",\"keccak256\":\"0x1ccedf5213730632540c748486637d7b1977ee73375818bf498a8276ca49dd13\",\"license\":\"MIT\"},\"src/ArbitrationProxyInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.2;\\n\\ninterface IHomeArbitrationProxy {\\n    /**\\n     * @dev Receives the requested arbitration for a question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _contestedAnswer The answer the requester deems to be incorrect.\\n     * @param _requester The address of the user that requested arbitration.\\n     */\\n    function receiveArbitrationRequest(\\n        bytes32 _questionID,\\n        bytes32 _contestedAnswer,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @dev Receives a failed attempt to request arbitration. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     */\\n    function receiveArbitrationFailure(bytes32 _questionID) external;\\n\\n    /**\\n     * @dev Receives the answer to a specified question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _answer The answer from the arbitrator.\\n     */\\n    function receiveArbitrationAnswer(bytes32 _questionID, bytes32 _answer) external;\\n}\\n\\ninterface IForeignArbitrationProxy {\\n    /**\\n     * @dev Requests arbitration for given question ID. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     */\\n    function acknowledgeArbitration(bytes32 _questionID) external;\\n\\n    /**\\n     * @dev Cancels the arbitration request. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     */\\n    function cancelArbitration(bytes32 _questionID) external;\\n\\n    /**\\n     * @notice Gets the fee to create a dispute.\\n     * @return The fee to create a dispute.\\n     */\\n    function getDisputeFee(bytes32 questionID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x896d94e9556f4ceef5515938566f1faee46de92665f47ad181b646040e408569\",\"license\":\"MIT\"},\"src/RealitioForeignArbitrationProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@hbarcelos]\\n *  @reviewers: [@ferittuncer*, @fnanni-0, @nix1g]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.7.2;\\n\\nimport \\\"@kleros/erc-792/contracts/IArbitrator.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/IArbitrable.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\\\";\\nimport \\\"./dependencies/IAMB.sol\\\";\\nimport \\\"./ArbitrationProxyInterfaces.sol\\\";\\n\\ncontract RealitioForeignArbitrationProxy is IForeignArbitrationProxy, IArbitrable, IEvidence {\\n    /// @dev The contract governor. TRUSTED.\\n    address public governor = msg.sender;\\n\\n    /// @dev Whether the contract has been properly initialized or not.\\n    bool public initialized;\\n\\n    /// @dev The address of the arbitrator. TRUSTED.\\n    IArbitrator public immutable arbitrator;\\n\\n    /// @dev The extra data used to raise a dispute in the arbitrator.\\n    bytes public arbitratorExtraData;\\n\\n    /// @dev The number of choices for the arbitrator.\\n    uint256 public constant NUMBER_OF_CHOICES_FOR_ARBITRATOR = (2**256) - 2;\\n\\n    /// @dev ArbitraryMessageBridge contract address. TRUSTED.\\n    IAMB public immutable amb;\\n\\n    /// @dev Address of the counter-party proxy on the Home Chain. TRUSTED.\\n    address public homeProxy;\\n\\n    /// @dev The chain ID where the home proxy is deployed.\\n    uint256 public homeChainId;\\n\\n    /// @dev The path for the Terms of Service for Kleros as an arbitrator for Realitio.\\n    string public termsOfService;\\n\\n    enum Status {None, Requested, Created, Failed}\\n\\n    struct Arbitration {\\n        // Status of the arbitration.\\n        Status status;\\n        // Address that made the arbitration request.\\n        address payable requester;\\n        // The deposit paid by the requester at the time of the arbitration.\\n        uint256 deposit;\\n    }\\n\\n    /// @dev Tracks arbitration requests for question ID.\\n    mapping(bytes32 => Arbitration) public arbitrations;\\n\\n    /// @dev Associates dispute IDs to question IDs.\\n    mapping(uint256 => bytes32) public disputeIDToQuestionID;\\n\\n    /**\\n     * @notice Should be emitted when the arbitration is requested.\\n     * @param _questionID The ID of the question to be arbitrated.\\n     * @param _answer The answer provided by the requester.\\n     * @param _requester The requester.\\n     */\\n    event ArbitrationRequested(bytes32 indexed _questionID, bytes32 _answer, address indexed _requester);\\n\\n    /**\\n     * @notice Should be emitted when the dispute is created.\\n     * @param _questionID The ID of the question to be arbitrated.\\n     * @param _disputeID The ID of the dispute.\\n     */\\n    event ArbitrationCreated(bytes32 indexed _questionID, uint256 indexed _disputeID);\\n\\n    /**\\n     * @notice Should be emitted when the dispute could not be created.\\n     * @dev This will happen if there is an increase in the arbitration fees\\n     * between the time the arbitration is made and the time it is acknowledged.\\n     * @param _questionID The ID of the question to be arbitrated.\\n     */\\n    event ArbitrationFailed(bytes32 indexed _questionID);\\n\\n    /**\\n     * @notice Should be emitted when the arbitration is canceled by the Home Chain.\\n     * @param _questionID The ID of the question to be arbitrated.\\n     */\\n    event ArbitrationCanceled(bytes32 indexed _questionID);\\n\\n    modifier onlyArbitrator() {\\n        require(msg.sender == address(arbitrator), \\\"Only arbitrator allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"Only governor allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyAmb() {\\n        require(msg.sender == address(amb), \\\"Only AMB allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyHomeChain() {\\n        require(amb.messageSourceChainId() == bytes32(homeChainId), \\\"Only home chain allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyHomeProxy() {\\n        require(amb.messageSender() == homeProxy, \\\"Only home proxy allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyIfInitialized() {\\n        require(initialized, \\\"Not initialized yet\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Creates an arbitration proxy on the foreign chain.\\n     * @dev Contract will still require initialization before being usable.\\n     * @param _amb ArbitraryMessageBridge contract address.\\n     * @param _arbitrator Arbitrator contract address.\\n     * @param _arbitratorExtraData The extra data used to raise a dispute in the arbitrator.\\n     */\\n    constructor(\\n        IAMB _amb,\\n        IArbitrator _arbitrator,\\n        bytes memory _arbitratorExtraData\\n    ) {\\n        amb = _amb;\\n        arbitrator = _arbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract so it can start receiving arbitration requests.\\n     * @dev This function can only be called once, after `homeProxy` has already been set for the first time.\\n     * Since there is a circular dependency between `RealitioForeignArbitrationProxy` and `RealitioHomeArbitrationProxy`,\\n     * it is not possible to require the home proxy to be a constructor param.\\n     * @param _metaEvidence The URI of the meta evidence file.\\n     * @param _termsOfService The path for the Terms of Service for Kleros as an arbitrator for Realitio.\\n     */\\n    function initialize(string calldata _metaEvidence, string calldata _termsOfService) external onlyGovernor {\\n        require(!initialized, \\\"Proxy already initialized\\\");\\n        require(homeProxy != address(0), \\\"Home proxy not set\\\");\\n\\n        initialized = true;\\n        termsOfService = _termsOfService;\\n\\n        emit MetaEvidence(0, _metaEvidence);\\n    }\\n\\n    /**\\n     * @notice Sets the address of a new governor.\\n     * @param _governor The address of the new governor.\\n     */\\n    function setGovernor(address _governor) external onlyGovernor {\\n        governor = _governor;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the arbitration proxy on the Home Chain.\\n     * @param _homeProxy The address of the proxy.\\n     * @param _homeChainId The chain ID where the home proxy is deployed.\\n     */\\n    function setHomeProxy(address _homeProxy, uint256 _homeChainId) external onlyGovernor {\\n        require(homeProxy == address(0), \\\"Home proxy already set\\\");\\n\\n        homeProxy = _homeProxy;\\n        homeChainId = _homeChainId;\\n    }\\n\\n    /**\\n     * @notice Requests arbitration for given question ID.\\n     * @dev Can be executed only if the contract has been initialized.\\n     * @param _questionID The ID of the question.\\n     * @param _contestedAnswer The answer the requester deems to be incorrect.\\n     */\\n    function requestArbitration(bytes32 _questionID, bytes32 _contestedAnswer) external payable onlyIfInitialized {\\n        Arbitration storage arbitration = arbitrations[_questionID];\\n        require(arbitration.status == Status.None, \\\"Arbitration already requested\\\");\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n        require(msg.value >= arbitrationCost, \\\"Deposit value too low\\\");\\n\\n        arbitration.status = Status.Requested;\\n        arbitration.requester = msg.sender;\\n        arbitration.deposit = msg.value;\\n\\n        bytes4 methodSelector = IHomeArbitrationProxy(0).receiveArbitrationRequest.selector;\\n        bytes memory data = abi.encodeWithSelector(methodSelector, _questionID, _contestedAnswer, msg.sender);\\n        amb.requireToPassMessage(homeProxy, data, amb.maxGasPerTx());\\n\\n        emit ArbitrationRequested(_questionID, _contestedAnswer, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Requests arbitration for given question ID.\\n     * @param _questionID The ID of the question.\\n     */\\n    function acknowledgeArbitration(bytes32 _questionID) external override onlyAmb onlyHomeChain onlyHomeProxy {\\n        Arbitration storage arbitration = arbitrations[_questionID];\\n        require(arbitration.status == Status.Requested, \\\"Invalid arbitration status\\\");\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n\\n        if (arbitration.deposit < arbitrationCost) {\\n            arbitration.status = Status.Failed;\\n\\n            emit ArbitrationFailed(_questionID);\\n        } else {\\n            // At this point, arbitration.deposit is guaranteed to be greater than or equal to the arbitration cost.\\n            uint256 remainder = arbitration.deposit - arbitrationCost;\\n\\n            uint256 disputeID = arbitrator.createDispute{value: arbitrationCost}(\\n                NUMBER_OF_CHOICES_FOR_ARBITRATOR,\\n                arbitratorExtraData\\n            );\\n            disputeIDToQuestionID[disputeID] = _questionID;\\n            arbitration.status = Status.Created;\\n            arbitration.deposit = 0;\\n\\n            if (remainder > 0) {\\n                arbitration.requester.send(remainder);\\n            }\\n\\n            emit ArbitrationCreated(_questionID, disputeID);\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancels the arbitration.\\n     * @param _questionID The ID of the question.\\n     */\\n    function cancelArbitration(bytes32 _questionID) external override onlyAmb onlyHomeChain onlyHomeProxy {\\n        Arbitration storage arbitration = arbitrations[_questionID];\\n        require(arbitration.status == Status.Requested, \\\"Invalid arbitration status\\\");\\n\\n        arbitration.requester.send(arbitration.deposit);\\n\\n        delete arbitrations[_questionID];\\n\\n        emit ArbitrationCanceled(_questionID);\\n    }\\n\\n    /**\\n     * @notice Cancels the arbitration in case the dispute could not be created.\\n     * @param _questionID The ID of the question.\\n     */\\n    function handleFailedDisputeCreation(bytes32 _questionID) external onlyIfInitialized {\\n        Arbitration storage arbitration = arbitrations[_questionID];\\n        require(arbitration.status == Status.Failed, \\\"Invalid arbitration status\\\");\\n\\n        bytes4 methodSelector = IHomeArbitrationProxy(0).receiveArbitrationFailure.selector;\\n        bytes memory data = abi.encodeWithSelector(methodSelector, _questionID);\\n        amb.requireToPassMessage(homeProxy, data, amb.maxGasPerTx());\\n\\n        arbitration.requester.send(arbitration.deposit);\\n\\n        delete arbitrations[_questionID];\\n\\n        emit ArbitrationCanceled(_questionID);\\n    }\\n\\n    /**\\n     * @notice Rules a specified dispute.\\n     * @dev Note that 0 is reserved for \\\"Unable/refused to arbitrate\\\" and we map it to `bytes32(-1)` which has a similar connotation in Realitio.\\n     * @param _disputeID The ID of the dispute in the ERC792 arbitrator.\\n     * @param _ruling The ruling given by the arbitrator.\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external override onlyArbitrator {\\n        bytes32 questionID = disputeIDToQuestionID[_disputeID];\\n        Arbitration storage arbitration = arbitrations[questionID];\\n        require(arbitration.status == Status.Created, \\\"Invalid arbitration status\\\");\\n\\n        delete arbitrations[questionID];\\n        delete disputeIDToQuestionID[_disputeID];\\n\\n        // Realitio ruling is shifted by 1 compared to Kleros.\\n        // For example, jurors refusing to rule is `0` on Kleros, but uint(-1) on Realitio.\\n        // The line below could be written more explicitly as:\\n        //     bytes32(_ruling == 0 ? uint256(-1) : _ruling - 1)\\n        // But the way it is written saves some gas.\\n        bytes32 answer = bytes32(_ruling - 1);\\n\\n        bytes4 methodSelector = IHomeArbitrationProxy(0).receiveArbitrationAnswer.selector;\\n        bytes memory data = abi.encodeWithSelector(methodSelector, questionID, answer);\\n        amb.requireToPassMessage(homeProxy, data, amb.maxGasPerTx());\\n\\n        emit Ruling(arbitrator, _disputeID, _ruling);\\n    }\\n\\n    /**\\n     * @notice Gets the fee to create a dispute.\\n     * @return The fee to create a dispute.\\n     */\\n    function getDisputeFee(bytes32 questionID) external view override returns (uint256) {\\n        return arbitrator.arbitrationCost(arbitratorExtraData);\\n    }\\n}\\n\",\"keccak256\":\"0x2603bcae698d374ec866da6fde4b82af105e713501682f9334fec4a3a9e871ac\",\"license\":\"MIT\"},\"src/dependencies/IAMB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.2;\\n\\ninterface IAMB {\\n    function requireToPassMessage(\\n        address _contract,\\n        bytes memory _data,\\n        uint256 _gas\\n    ) external returns (bytes32);\\n\\n    function maxGasPerTx() external view returns (uint256);\\n\\n    function messageSender() external view returns (address);\\n\\n    function messageSourceChainId() external view returns (bytes32);\\n\\n    function messageId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9fa6c7595f10a3c46a9cc6fdb4f2bcdff0a2476ae7f4e2f41a3182797a74dc4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80636cc6cde1116100a0578063d521aa9f11610064578063d521aa9f1461049f578063e10787ac146104c9578063ebbdd2b0146104f3578063ef1269671461051d578063f9636d14146105325761011f565b80636cc6cde1146103a8578063a22352e2146103bd578063a8802500146103e7578063c42cf53514610449578063cdc10a8a1461047c5761011f565b80631e117f49116100e75780631e117f4914610244578063311a6c561461025957806348f378571461028b5780634cd88b76146102a05780636260ae6c1461036f5761011f565b80630c340a24146101245780630c7ac7b6146101555780630fa8c7ce146101df5780631062b39a14610206578063158ef93e1461021b575b600080fd5b34801561013057600080fd5b5061013961055c565b604080516001600160a01b039092168252519081900360200190f35b34801561016157600080fd5b5061016a61056b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b506101f46105f8565b60408051918252519081900360200190f35b34801561021257600080fd5b506101396105fe565b34801561022757600080fd5b50610230610622565b604080519115158252519081900360200190f35b34801561025057600080fd5b5061016a610632565b34801561026557600080fd5b506102896004803603604081101561027c57600080fd5b508035906020013561068d565b005b34801561029757600080fd5b506101396109ea565b3480156102ac57600080fd5b50610289600480360360408110156102c357600080fd5b8101906020810181356401000000008111156102de57600080fd5b8201836020820111156102f057600080fd5b8035906020019184600183028401116401000000008311171561031257600080fd5b91939092909160208101903564010000000081111561033057600080fd5b82018360208201111561034257600080fd5b8035906020019184600183028401116401000000008311171561036457600080fd5b5090925090506109f9565b34801561037b57600080fd5b506102896004803603604081101561039257600080fd5b506001600160a01b038135169060200135610b89565b3480156103b457600080fd5b50610139610c5d565b3480156103c957600080fd5b506101f4600480360360208110156103e057600080fd5b5035610c81565b3480156103f357600080fd5b506104116004803603602081101561040a57600080fd5b5035610d92565b6040518084600381111561042157fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b34801561045557600080fd5b506102896004803603602081101561046c57600080fd5b50356001600160a01b0316610dbf565b6102896004803603604081101561049257600080fd5b5080359060200135610e38565b3480156104ab57600080fd5b506101f4600480360360208110156104c257600080fd5b503561128b565b3480156104d557600080fd5b50610289600480360360208110156104ec57600080fd5b503561129d565b3480156104ff57600080fd5b506102896004803603602081101561051657600080fd5b5035611599565b34801561052957600080fd5b506101f46118b4565b34801561053e57600080fd5b506102896004803603602081101561055557600080fd5b50356118ba565b6000546001600160a01b031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105f05780601f106105c5576101008083540402835291602001916105f0565b820191906000526020600020905b8154815290600101906020018083116105d357829003601f168201915b505050505081565b60011981565b7f000000000000000000000000000000000000000000000000000000000000000081565b600054600160a01b900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105f05780601f106105c5576101008083540402835291602001916105f0565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070a576040805162461bcd60e51b815260206004820152601760248201527f4f6e6c792061726269747261746f7220616c6c6f776564000000000000000000604482015290519081900360640190fd5b60008281526006602090815260408083205480845260059092529091206002815460ff16600381111561073957fe5b14610788576040805162461bcd60e51b815260206004820152601a602482015279496e76616c6964206172626974726174696f6e2073746174757360301b604482015290519081900360640190fd5b600082815260056020908152604080832080546001600160a81b0319168155600101839055868352600682528083209290925581516024810185905260001986016044808301829052845180840390910181526064909201845281830180516306bad43760e51b6001600160e01b039091168117909152600254855163e5789d0360e01b81529551929591946001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463dc8601b39491909316928692869263e5789d039260048083019392829003018186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d602081101561089a57600080fd5b50516040516001600160e01b031960e086901b1681526001600160a01b038416600482019081526044820183905260606024830190815284516064840152845191929091608490910190602086019080838360005b838110156109075781810151838201526020016108ef565b50505050905090810190601f1680156109345780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561095557600080fd5b505af1158015610969573d6000803e3d6000fd5b505050506040513d602081101561097f57600080fd5b505060408051878152905188916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769181900360200190a350505050505050565b6002546001600160a01b031681565b6000546001600160a01b03163314610a50576040805162461bcd60e51b815260206004820152601560248201527413db9b1e4819dbdd995c9b9bdc88185b1b1bddd959605a1b604482015290519081900360640190fd5b600054600160a01b900460ff1615610aaf576040805162461bcd60e51b815260206004820152601960248201527f50726f787920616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b6002546001600160a01b0316610b01576040805162461bcd60e51b8152602060048201526012602482015271121bdb59481c1c9bde1e481b9bdd081cd95d60721b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b179055610b2060048383611e57565b5060007f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d858560405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a250505050565b6000546001600160a01b03163314610be0576040805162461bcd60e51b815260206004820152601560248201527413db9b1e4819dbdd995c9b9bdc88185b1b1bddd959605a1b604482015290519081900360640190fd5b6002546001600160a01b031615610c37576040805162461bcd60e51b8152602060048201526016602482015275121bdb59481c1c9bde1e48185b1c9958591e481cd95d60521b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b039390931692909217909155600355565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163f7434ea960e01b815260206004820190815260018054600260001961010083851615020190911604602484018190526000936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363f7434ea993929091829160449091019084908015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b50509250505060206040518083038186803b158015610d6057600080fd5b505afa158015610d74573d6000803e3d6000fd5b505050506040513d6020811015610d8a57600080fd5b505192915050565b6005602052600090815260409020805460019091015460ff82169161010090046001600160a01b03169083565b6000546001600160a01b03163314610e16576040805162461bcd60e51b815260206004820152601560248201527413db9b1e4819dbdd995c9b9bdc88185b1b1bddd959605a1b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff16610e8c576040805162461bcd60e51b8152602060048201526013602482015272139bdd081a5b9a5d1a585b1a5e9959081e595d606a1b604482015290519081900360640190fd5b600082815260056020526040812090815460ff166003811115610eab57fe5b14610efd576040805162461bcd60e51b815260206004820152601d60248201527f4172626974726174696f6e20616c726561647920726571756573746564000000604482015290519081900360640190fd5b60405163f7434ea960e01b815260206004820190815260018054600260001961010083851615020190911604602484018190526000936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363f7434ea993929091829160449091019084908015610fbe5780601f10610f9357610100808354040283529160200191610fbe565b820191906000526020600020905b815481529060010190602001808311610fa157829003601f168201915b50509250505060206040518083038186803b158015610fdc57600080fd5b505afa158015610ff0573d6000803e3d6000fd5b505050506040513d602081101561100657600080fd5b5051905034811115611057576040805162461bcd60e51b81526020600482015260156024820152744465706f7369742076616c756520746f6f206c6f7760581b604482015290519081900360640190fd5b815461010033908102600160ff199093168317610100600160a81b0319161784553491840191909155604080516024810187905260448101869052606480820193909352815180820390930183526084018152602080830180516001600160e01b0316632693a57760e11b908117909152600254835163e5789d0360e01b815293519194937f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169463dc8601b39491909316928692869263e5789d0392600480840193919291829003018186803b15801561113b57600080fd5b505afa15801561114f573d6000803e3d6000fd5b505050506040513d602081101561116557600080fd5b50516040516001600160e01b031960e086901b1681526001600160a01b038416600482019081526044820183905260606024830190815284516064840152845191929091608490910190602086019080838360005b838110156111d25781810151838201526020016111ba565b50505050905090810190601f1680156111ff5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050506040513d602081101561124a57600080fd5b5050604080518681529051339188917fdf57d4b6855c24699cf6fb10842c48802b96f0d752747f559fbade8c75d937c89181900360200190a3505050505050565b60066020526000908152604090205481565b600054600160a01b900460ff166112f1576040805162461bcd60e51b8152602060048201526013602482015272139bdd081a5b9a5d1a585b1a5e9959081e595d606a1b604482015290519081900360640190fd5b60008181526005602052604090206003815460ff16600381111561131157fe5b14611360576040805162461bcd60e51b815260206004820152601a602482015279496e76616c6964206172626974726174696f6e2073746174757360301b604482015290519081900360640190fd5b6040805160248082018590528251808303909101815260449091018252602081810180516001600160e01b0316637370d9db60e11b908117909152600254845163e5789d0360e01b8152945191946001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463dc8601b39493909116928692869263e5789d0392600480840193829003018186803b15801561140957600080fd5b505afa15801561141d573d6000803e3d6000fd5b505050506040513d602081101561143357600080fd5b50516040516001600160e01b031960e086901b1681526001600160a01b038416600482019081526044820183905260606024830190815284516064840152845191929091608490910190602086019080838360005b838110156114a0578181015183820152602001611488565b50505050905090810190601f1680156114cd5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050506040513d602081101561151857600080fd5b5050825460018401546040516101009092046001600160a01b0316916108fc82150291906000818181858888f150505060008681526005602052604080822080546001600160a81b0319168155600101829055518793507fc7059eeade32e840ec970303727a077caf710367f5174a3d5e5b3ab018a41e279250a250505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611609576040805162461bcd60e51b815260206004820152601060248201526f13db9b1e4810535088185b1b1bddd95960821b604482015290519081900360640190fd5b60035460001b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166857600080fd5b505afa15801561167c573d6000803e3d6000fd5b505050506040513d602081101561169257600080fd5b5051146116e0576040805162461bcd60e51b815260206004820152601760248201527613db9b1e481a1bdb594818da185a5b88185b1b1bddd959604a1b604482015290519081900360640190fd5b6002546040805163d67bdd2560e01b815290516001600160a01b03928316927f0000000000000000000000000000000000000000000000000000000000000000169163d67bdd25916004808301926020929190829003018186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d602081101561177157600080fd5b50516001600160a01b0316146117c8576040805162461bcd60e51b815260206004820152601760248201527613db9b1e481a1bdb59481c1c9bde1e48185b1b1bddd959604a1b604482015290519081900360640190fd5b60008181526005602052604090206001815460ff1660038111156117e857fe5b14611837576040805162461bcd60e51b815260206004820152601a602482015279496e76616c6964206172626974726174696f6e2073746174757360301b604482015290519081900360640190fd5b805460018201546040516101009092046001600160a01b0316916108fc82150291906000818181858888f150505060008481526005602052604080822080546001600160a81b0319168155600101829055518593507fc7059eeade32e840ec970303727a077caf710367f5174a3d5e5b3ab018a41e279250a25050565b60035481565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461192a576040805162461bcd60e51b815260206004820152601060248201526f13db9b1e4810535088185b1b1bddd95960821b604482015290519081900360640190fd5b60035460001b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561198957600080fd5b505afa15801561199d573d6000803e3d6000fd5b505050506040513d60208110156119b357600080fd5b505114611a01576040805162461bcd60e51b815260206004820152601760248201527613db9b1e481a1bdb594818da185a5b88185b1b1bddd959604a1b604482015290519081900360640190fd5b6002546040805163d67bdd2560e01b815290516001600160a01b03928316927f0000000000000000000000000000000000000000000000000000000000000000169163d67bdd25916004808301926020929190829003018186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d6020811015611a9257600080fd5b50516001600160a01b031614611ae9576040805162461bcd60e51b815260206004820152601760248201527613db9b1e481a1bdb59481c1c9bde1e48185b1b1bddd959604a1b604482015290519081900360640190fd5b60008181526005602052604090206001815460ff166003811115611b0957fe5b14611b58576040805162461bcd60e51b815260206004820152601a602482015279496e76616c6964206172626974726174696f6e2073746174757360301b604482015290519081900360640190fd5b60405163f7434ea960e01b815260206004820190815260018054600260001961010083851615020190911604602484018190526000936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363f7434ea993929091829160449091019084908015611c195780601f10611bee57610100808354040283529160200191611c19565b820191906000526020600020905b815481529060010190602001808311611bfc57829003601f168201915b50509250505060206040518083038186803b158015611c3757600080fd5b505afa158015611c4b573d6000803e3d6000fd5b505050506040513d6020811015611c6157600080fd5b50516001830154909150811115611cad57815460ff1916600317825560405183907f771bd0f0f064339da626238870be0bd3b8729b56b36a969926004c77065c958790600090a2611e52565b6001808301546040805163c13517e160e01b8152600119600482018181526024830193845285546002600019610100838a16150201909116046044840181905294879003956000956001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169563c13517e1958a95949260649091019084908015611d7f5780601f10611d5457610100808354040283529160200191611d7f565b820191906000526020600020905b815481529060010190602001808311611d6257829003601f168201915b505093505050506020604051808303818588803b158015611d9f57600080fd5b505af1158015611db3573d6000803e3d6000fd5b50505050506040513d6020811015611dca57600080fd5b50516000818152600660205260408120879055855460ff19166002178655600186015590508115611e225783546040516101009091046001600160a01b0316906108fc8415029084906000818181858888f150505050505b604051819086907fe95d26d9130e7f0a616c8f66712cb511d9c8c7ab8c4b737afd815bd9a9da062d90600090a350505b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611e8d5760008555611ed3565b82601f10611ea65782800160ff19823516178555611ed3565b82800160010185558215611ed3579182015b82811115611ed3578235825591602001919060010190611eb8565b50611edf929150611ee3565b5090565b5b80821115611edf5760008155600101611ee456fea2646970667358221220a42c21295daecce27734d413479fbbd602852acd5bdb5d569e67a8675e884dca64736f6c63430007040033",
  "devdoc": {
    "events": {
      "ArbitrationCanceled(bytes32)": {
        "params": {
          "_questionID": "The ID of the question to be arbitrated."
        }
      },
      "ArbitrationCreated(bytes32,uint256)": {
        "params": {
          "_disputeID": "The ID of the dispute.",
          "_questionID": "The ID of the question to be arbitrated."
        }
      },
      "ArbitrationFailed(bytes32)": {
        "details": "This will happen if there is an increase in the arbitration fees between the time the arbitration is made and the time it is acknowledged.",
        "params": {
          "_questionID": "The ID of the question to be arbitrated."
        }
      },
      "ArbitrationRequested(bytes32,bytes32,address)": {
        "params": {
          "_answer": "The answer provided by the requester.",
          "_questionID": "The ID of the question to be arbitrated.",
          "_requester": "The requester."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acknowledgeArbitration(bytes32)": {
        "params": {
          "_questionID": "The ID of the question."
        }
      },
      "cancelArbitration(bytes32)": {
        "params": {
          "_questionID": "The ID of the question."
        }
      },
      "constructor": {
        "details": "Contract will still require initialization before being usable.",
        "params": {
          "_amb": "ArbitraryMessageBridge contract address.",
          "_arbitrator": "Arbitrator contract address.",
          "_arbitratorExtraData": "The extra data used to raise a dispute in the arbitrator."
        }
      },
      "getDisputeFee(bytes32)": {
        "returns": {
          "_0": "The fee to create a dispute."
        }
      },
      "handleFailedDisputeCreation(bytes32)": {
        "params": {
          "_questionID": "The ID of the question."
        }
      },
      "initialize(string,string)": {
        "details": "This function can only be called once, after `homeProxy` has already been set for the first time. Since there is a circular dependency between `RealitioForeignArbitrationProxy` and `RealitioHomeArbitrationProxy`, it is not possible to require the home proxy to be a constructor param.",
        "params": {
          "_metaEvidence": "The URI of the meta evidence file.",
          "_termsOfService": "The path for the Terms of Service for Kleros as an arbitrator for Realitio."
        }
      },
      "requestArbitration(bytes32,bytes32)": {
        "details": "Can be executed only if the contract has been initialized.",
        "params": {
          "_contestedAnswer": "The answer the requester deems to be incorrect.",
          "_questionID": "The ID of the question."
        }
      },
      "rule(uint256,uint256)": {
        "details": "Note that 0 is reserved for \"Unable/refused to arbitrate\" and we map it to `bytes32(-1)` which has a similar connotation in Realitio.",
        "params": {
          "_disputeID": "The ID of the dispute in the ERC792 arbitrator.",
          "_ruling": "The ruling given by the arbitrator."
        }
      },
      "setGovernor(address)": {
        "params": {
          "_governor": "The address of the new governor."
        }
      },
      "setHomeProxy(address,uint256)": {
        "params": {
          "_homeChainId": "The chain ID where the home proxy is deployed.",
          "_homeProxy": "The address of the proxy."
        }
      }
    },
    "stateVariables": {
      "NUMBER_OF_CHOICES_FOR_ARBITRATOR": {
        "details": "The number of choices for the arbitrator."
      },
      "amb": {
        "details": "ArbitraryMessageBridge contract address. TRUSTED."
      },
      "arbitrations": {
        "details": "Tracks arbitration requests for question ID."
      },
      "arbitrator": {
        "details": "The address of the arbitrator. TRUSTED."
      },
      "arbitratorExtraData": {
        "details": "The extra data used to raise a dispute in the arbitrator."
      },
      "disputeIDToQuestionID": {
        "details": "Associates dispute IDs to question IDs."
      },
      "governor": {
        "details": "The contract governor. TRUSTED."
      },
      "homeChainId": {
        "details": "The chain ID where the home proxy is deployed."
      },
      "homeProxy": {
        "details": "Address of the counter-party proxy on the Home Chain. TRUSTED."
      },
      "initialized": {
        "details": "Whether the contract has been properly initialized or not."
      },
      "termsOfService": {
        "details": "The path for the Terms of Service for Kleros as an arbitrator for Realitio."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ArbitrationCanceled(bytes32)": {
        "notice": "Should be emitted when the arbitration is canceled by the Home Chain."
      },
      "ArbitrationCreated(bytes32,uint256)": {
        "notice": "Should be emitted when the dispute is created."
      },
      "ArbitrationFailed(bytes32)": {
        "notice": "Should be emitted when the dispute could not be created."
      },
      "ArbitrationRequested(bytes32,bytes32,address)": {
        "notice": "Should be emitted when the arbitration is requested."
      }
    },
    "kind": "user",
    "methods": {
      "acknowledgeArbitration(bytes32)": {
        "notice": "Requests arbitration for given question ID."
      },
      "cancelArbitration(bytes32)": {
        "notice": "Cancels the arbitration."
      },
      "constructor": {
        "notice": "Creates an arbitration proxy on the foreign chain."
      },
      "getDisputeFee(bytes32)": {
        "notice": "Gets the fee to create a dispute."
      },
      "handleFailedDisputeCreation(bytes32)": {
        "notice": "Cancels the arbitration in case the dispute could not be created."
      },
      "initialize(string,string)": {
        "notice": "Initializes the contract so it can start receiving arbitration requests."
      },
      "requestArbitration(bytes32,bytes32)": {
        "notice": "Requests arbitration for given question ID."
      },
      "rule(uint256,uint256)": {
        "notice": "Rules a specified dispute."
      },
      "setGovernor(address)": {
        "notice": "Sets the address of a new governor."
      },
      "setHomeProxy(address,uint256)": {
        "notice": "Sets the address of the arbitration proxy on the Home Chain."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 213,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 216,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 222,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "arbitratorExtraData",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 237,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "homeProxy",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 240,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "homeChainId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 243,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "termsOfService",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 260,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "arbitrations",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Arbitration)255_storage)"
      },
      {
        "astId": 265,
        "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
        "label": "disputeIDToQuestionID",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)248": {
        "encoding": "inplace",
        "label": "enum RealitioForeignArbitrationProxy.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Arbitration)255_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RealitioForeignArbitrationProxy.Arbitration)",
        "numberOfBytes": "32",
        "value": "t_struct(Arbitration)255_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Arbitration)255_storage": {
        "encoding": "inplace",
        "label": "struct RealitioForeignArbitrationProxy.Arbitration",
        "members": [
          {
            "astId": 250,
            "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)248"
          },
          {
            "astId": 252,
            "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
            "label": "requester",
            "offset": 1,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 254,
            "contract": "src/RealitioForeignArbitrationProxy.sol:RealitioForeignArbitrationProxy",
            "label": "deposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
